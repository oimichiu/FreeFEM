// Mesh generation, change exercise
verbosity = 3;

// Mesh 
mesh Th1 = square(10, 10);
mesh Th2 = square(20, 10, [x+1, y]);

int[int] r1 = [2, 0];
plot(Th1, wait = true);

Th1 = change(Th1, label=r1);        // Change edges label from 2 to 0
plot(Th1, wait=1);

int[int] r2 = [4, 0];
Th2 = change(Th2, label=r2);        // Change edges label from 4 to 0
plot(Th2, wait=1);

mesh Th = Th1 + Th2;                // 'gluing together' Th1 and Th2 meshes
cout << "nb lab = " << int1d(Th1, 1, 3, 4)(1./lenEdge) + int1d(Th2, 1, 2, 3)(1./lenEdge)
    << " == " << int1d(Th, 1, 2, 3, 4)(1./lenEdge) << " == " << ((10 +20) + 10)*2 << endl;
plot(Th, wait=1);

fespace Vh(Th, P1);
Vh u, v;

macro Grad(u) [dx(u), dy(u)]        // Definition of a macro 

solve P(u, v)
    = int2d(Th)(
        Grad(u)'*Grad(v)
    )
    - int2d(Th)(
        v
    )
    + on(1, 3, u = 0)
    ;

plot(u, wait=1, fill=1, value=1, ps="06-changeMesh.eps");