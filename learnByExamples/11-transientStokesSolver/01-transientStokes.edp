// Tutorial to write a transient Stokes solver in matrix form
// Parameters
real nu = 0.1;
real T=1.;
real dt=0.1;

// Mesh
mesh Th = square(10, 10);

// Fespace
fespace Vh(Th, P2);
Vh u, v;
Vh uu, vv;
Vh uold = 0, vold = 0;

fespace Qh(Th, P1);
Qh p;
Qh pp;

// Problem
problem stokes (u, v, p, uu, vv, pp)
	= int2d(Th)(
  		  (u*uu + v*vv)/dt
		+ nu*(dx(u)*dx(uu) + dy(u)*dy(uu) + dx(v)*dx(vv) + dy(v)*dy(vv))
		- p*pp*1.e-6
		- p*(dx(uu) + dy(vv))
		- pp*(dx(u) + dy(v))
	)
	- int2d(Th)(
		(uold*uu + vold*vv)/dt
	)
	+ on(1, 2, 4, u=0, v=0)
	+ on(3, u=1, v=0)
	;
	
// Time loop
int m, M = T/dt;
for(m = 0; m < M; m++){
	stokes;
	uold = u;
	vold = v;
}

// Plot
plot(p, value=true, wait=true, cmm="t="+m*dt);
plot([u, v], value=true, wait=true, cmm="t="+m*dt);

fespace Xh(Th, [P2, P2, P1]);
varf aa ([u, v, p], [uu, vv, pp])
	= int2d(Th)(
		  (u*uu + v*vv)/dt
		+ nu*(dx(u)*dx(uu) + dy(u)*dy(uu) + dx(v)*dx(vv) + dy(v)*dy(vv))
		- p*pp*1.e-6
		- p*(dx(uu) + dy(vv))
		- pp*(dx(u) + dy(v))
	)
	+ on(1, 2, 4, u=0, v=0)
	+ on(3, u=1, v=0)
	;
	
varf bb ([uold, vold, pold], [uu, vv, pp])
	= int2d(Th)(
		(uold*uu + vold*vv)/dt
	)
	//+ on(1, 2, 4, uold=0, vold=0)
	//+ on(3, uold=1, vold=0)
	;
	
varf bcl ([uold, vold, pold], [uu, vv, pp])
	= on(1, 2, 4, uold=0, vold=0)
	+ on(3, uold=1, vold=0)
	;
	
matrix A = aa(Xh, Xh, solver=UMFPACK);
matrix B = bb(Xh, Xh);
real[int] b = bcl(0, Xh);

real[int] sol(Xh.ndof), aux(Xh.ndof);
for (m = 0; m < M; m++){
	aux = B*sol; aux += b;
	sol = A^-1 * aux;
}

Xh [w1, w2, wp] = [uold, vold, pp];
sol = w1[];	// cause also the copy of w2 and wp
for (m=0; m < M; m++){
	aux = B*sol; aux += b;
	sol = A^-1 * aux;
}
w1[] = sol; u = w1; v = w2; p = wp;
plot(p, value=true, wait=true, cmm="t="+m*dt);
plot([u, v], value=true, wait=true, cmm="t="+m*dt);