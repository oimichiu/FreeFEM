// Parameters
func u0 = 10. + 90.*x/6.;
func k = 1.8*(y < 0.5) + 0.2;
real ue = 25.;
real alpha = 0.25;
real T = 5.;
real dt = 0.1;
real rad = 546.;
real uek = 273.;

// Mesh
mesh Th = square(30, 5, [6.*x,y]);

// Fespace
fespace Vh(Th, P1);
Vh vold, w, v = u0 - ue, b, vp;

// Problem
problem thermradia(v, w)
    = int2d(Th)(
        v*w/dt
        + k*(dx(v) * dx(w) + dy(v) * dy(w))
    )
    + int1d(Th, 1, 3)(
        b*v*w
    )
    - int2d(Th)(
        vold*w/dt
    )
    + on(2, 4, v=u0-ue)
    ;

verbosity = 0;      // to remove spurious FREEfem print
for (real t = 0; t<T;t+=dt){
    vold[] = v[];   // just copy DoF's, faster than interpolation
    for (int m = 0; m < 5; m++){
        vp[]=v[];   // save previous state of commute error
        b = alpha + rad * (v + 2*uek) * ((v+uek)^2 + uek^2);
        thermradia;
        vp[] -=v[];
        real err = vp[].linfty;     // error value
        cout << " time " << t << " iter " << m << " err = "<< vp[].linfty << endl;
        if( err < 1e-5) break; 
    }
}
v[] += ue;      // add a constant to all DoF's of v

plot(v, fill=true, ps="3DThemalRadiation.eps");