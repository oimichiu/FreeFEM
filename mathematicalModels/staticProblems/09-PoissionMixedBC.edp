// Poission Problem with mixed BC

// Parameters
int n1=20;
int n2= 40;

func f = -2*30*(x^2+y^2);		//given function
// the singular term of the solution is K*us (K: constant)
func us = sin(atan2(y, x)/2)*sqrt( sqrt(x^2 + y^2) );
real K = 10.;
func ue = K*us + 30*(x^2*y^2);

// Mesh
border N(t=0, 1){x = -1+t; y = 0; label = 1;};
border D1(t=0, 1){x = t; y = 0; label = 2;};
border D2(t=0, 1){x = 1; y = t; label = 2;};
border D3(t=0, 2){x = 1-t; y = 1; label = 2;};
border D4(t=0, 1){x = -1; y = 1-t; label = 2;};

mesh T0h = buildmesh(N(n1) + D1(n1) + D2(n1) + D3(n2) + D4(n1));
plot(T0h, wait = 1, cmm="Mesh");

// Fespace
fespace V0h(T0h, P1);
V0h u0, v0;

// Problem
solve Poisson0 (u0, v0)
	= int2d(T0h)(
		dx(u0)*dx(v0)
		+ dy(u0)*dy(v0)
	)
	- int2d(T0h)(
		f*v0
	)
	+ on(2, u0 = ue)
	;
	
// Mesh adapation by the simgular term
mesh Th = adaptmesh(T0h, us);
for (int i = 0; i < 5; i++)
mesh Th = adaptmesh(Th, us);

// Fespace
fespace Vh(Th, P1);
Vh u, v;

// Problem
solve Poisson (u, v)
	= int2d(Th)(
		dx(u)*dx(v)
		+ dy(u)*dy(v)
	)
	- int2d(Th)(
		f*v
	)
	+ on(2, u=ue)
	;
	
// Plot
plot(Th, wait = 1);
plot(u, wait=1, value=1);

// Error in H1 norm
Vh uue = ue;
real H1e = sqrt(int2d(Th)(dx(uue)^2 + dy(uue)^2 + uue^2));
Vh err0 = u0 -ue;
Vh err = u - ue;

Vh H1err0 = int2d(Th)(dx(err0)^2 + dy(err0)^2 + err0^2);
Vh H1err = int2d(Th)(dx(err)^2 + dy(err)^2 + err^2);

cout << "Relative error in first mesh = " << int2d(Th)(H1err0)/H1e << endl;
cout << "Relative error in adaptive mesh = " << int2d(Th)(H1err)/H1e << endl;